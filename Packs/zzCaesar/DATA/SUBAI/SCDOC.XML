<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="scdoc.xsl"?>

<doc>
	<!-- - - - - - TYPES - - - - - -->
	<!-- bool -->
	<type name="bool">
		<description>
			This is the bool type. Operations that can be done with variables of this type: "!,&amp;&amp;,||,^".
		</description>
	</type>
	<!-- int -->
	<type name="int">
		<description>
			This is 32-bit int. Operations that can be done with variables of this type: "+=,-=,+,-,=,*,/,%,==,!=,&lt;,&gt;,&lt;=,&gt;=".
		</description>
	</type>
	<!-- str -->
	<type name="str">
		<description>
			This is string.
		</description>
	</type>
	<!-- TPoint -->
	<type name="TPoint">
		<description>
			This is a generic 2D point and vector type.
		</description>
		<!-- TPoint properties -->
		<prop name="x" type="int">
			<description>
				Holds the x value.
			</description>
		</prop>
		<prop name="y" type="int">
			<description>
				Holds the y value.
			</description>
		</prop>
		<!-- TPoint functions -->
		<func name="Set" returns="TPoint">
			<param name="x" type="int" />
			<param name="y" type="int" />
			<description>
				Sets the x and y property of the point with the given x and y.
			</description>
		</func>
		<func name="SetLen" returns="void">
			<param name="length" type="int" />
			<description>
				Sets the length of the vector, by changing the x and y properties of the point.
			</description>
		</func>
		<func name="Len" returns="int">
			<description>
				Returns the length of the vector.
			</description>
		</func>
		<func name="Rot" returns="void">
			<param name="degree" type="int" />
			<description>
				Rotates the vector with the given degree.
			</description>
		</func>
		<func name="+" returns="TPoint">
			<param name="pointA" type="TPoint" />
			<param name="pointB" type="TPoint" />
			<description>
				Returns the sum of pointA and pointB.
			</description>
		</func>
		<func name="-" returns="TPoint">
			<param name="pointA" type="TPoint" />
			<param name="pointB" type="TPoint" />
			<description>
				Returns the difference of pointA and pointB.
			</description>
		</func>
		<func name="*" returns="TPoint">
			<param name="vector" type="TPoint" />
			<param name="number" type="int" />
			<description>
				Returns the multiplication of vector by number.
			</description>
		</func>
		<func name="/" returns="TPoint">
			<param name="vector" type="TPoint" />
			<param name="number" type="int" />
			<description>
				Returns the division of vector by number.
			</description>
		</func>
		<func name="=" returns="void">
			<param name="pointA" type="TPoint" ptr="1" />
			<param name="pointB" type="TPoint" />
			<description>
				Equals pointA to pointB.
			</description>
		</func>
		<func name="==" returns="bool">
			<param name="pointA" type="TPoint" />
			<param name="pointB" type="TPoint" />
			<description>
				Returns TRUE if pointA is equal to pointB, otherwise returns FALSE.
			</description>
		</func>
		<func name="!=" returns="bool">
			<param name="pointA" type="TPoint" />
			<param name="pointB" type="TPoint" />
			<description>
				Returns TRUE if pointA is not equal to pointB, otherwise returns FALSE.
			</description>
		</func>
	</type>
	<!-- TRect -->
	<type name="TRect">
		<description>
			This is a generic type that defines the coordinates of the upper-left and lower-right corners of a rectangle and methods related with it.
		</description>
		<prop name="left" type="int" ptr="1">
			<description>
				Specifies the x-coordinate of the upper-left corner of a rectangle.
				The left margin belongs to the area enclosed by the rectangle.
			</description>
		</prop>
		<prop name="top" type="int" ptr="1">
			<description>
				Specifies the y-coordinate of the upper-left corner of a rectangle.
				The top margin belongs to the area enclosed by the rectangle.
			</description>
		</prop>
		<prop name="right" type="int" ptr="1">
			<description>
				Specifies the x-coordinate of the lower-right corner of a rectangle.
				The right margin belongs to the area enclosed by the rectangle.
			</description>
		</prop>
		<prop name="bottom" type="int" ptr="1">
			<description>
				Specifies the y-coordinate of the lower-right corner of a rectangle.
				The bottom margin belongs to the area enclosed by the rectangle.
			</description>
		</prop>
		<func name="Set" returns="void">
			<param name="left" type="int" />
			<param name="top" type="int" />
			<param name="right" type="int" />
			<param name="bottom" type="int" />
			<description>
				Sets the left, top, right and bottom property of the rectangle with the given left, top, right and bottom value.
			</description>
		</func>
	</type>
	<!-- Obj -->
	<type name="Obj">
		<description>
			This is a generic type for all entities on the map (units, buildings...).
			This type corresponds to the "Object" class in the XML class hierarchy.
		</description>
		<!-- Obj properties -->
		<prop name="defense_slash" type="int" ptr="1">
			<description>
				Holds the defense against melee attacks.
			</description>
		</prop>
		<prop name="defense_pierce" type="int" ptr="1">
			<description>
				Holds the defense against ranged attacks.
			</description>
		</prop>
		<prop name="health" type="int" ptr="1">
			<description>
				Holds the current health.
			</description>
		</prop>
		<prop name="maxhealth" type="int" ptr="1">
			<description>
				Holds the maximum health that the object can have.
			</description>
		</prop>
		<prop name="sight" type="int" ptr="1">
			<description>
				Holds the range in which the object sees around itself. If enemies are in this range, the object attacks them.
			</description>
		</prop>
		<prop name="pos" type="TPoint" ptr="1">
			<description>
				Holds the current position of the object.
			</description>
		</prop>
		<prop name="attack" type="int" ptr="1">
			<description>
				Holds the attack of the object.
			</description>
		</prop>
		<prop name="damage_type" type="int" ptr="1">
			<description>
				Holds 1 for objects that have slash damage; 2 for objects that have piercing attack; 3 for objects that have siege damage.
			</description>
		</prop>
		<prop name="range" type="int" ptr="1">
			<description>
				If the distance to another object (usually an enemy) is greater than the range, the enemy can't be attacked.
				The distance is measured on the line that links the centers of the two objects (the radiuses of the objects are subtracted).
				The range depends on the type of attack the unit can perform.
				The range is greater than the min_range.
			</description>
		</prop>
		<prop name="min_range" type="int" ptr="1">
			<description>
				If the distance to another object(usually an enemy) is less than the min_range, the enemy cann't be attacked.
				The distance is measured on the line, that links the centers of the two objects.
				At that the radiuses of the objects are subtracted.
				The min_range is greater than the radius or equal to it but not less.
			</description>
		</prop>
		<prop name="radius" type="int">
			<description>
				This is the radius of the object.
				Every object takes a place on the map determined by the surface of a circle with this radius and a center - the position of the object on the map (x-y coordinates).
			</description>
		</prop>
		<prop name="player" type="int">
			<description>
				Holds the number of the player that controls the object.
			</description>
		</prop>
		<prop name="class" type="str">
			<description>
				Holds the name of the class from the XML class hierarchy of the object.
			</description>
		</prop>
		<prop name="script" type="str">
			<description>
				Holds the name of the currently executed method (from the XML class hierarchy).
			</description>
		</prop>
		<!-- Obj functions -->
		<func name="AsUnit" returns="Unit">
			<description>
				If the object is an Unit returns a handle to the Unit, otherwise returns empty reference.
				Use IsValid to make a difference between these cases.
			</description>
		</func>
		<func name="AsBuilding" returns="Building">
			<description>
				If the object is a Building returns a handle to the Building, otherwise returns empty reference.
				Use IsValid to make a difference between these cases.
			</description>
		</func>
		<func name="AsHero" returns="Hero">
			<description>
				If the object is a Hero returns a handle to the Hero, otherwise returns empty reference.
				Use IsValid to make a difference between these cases.
			</description>
		</func>
		<func name="AsTower" returns="Tower">
			<description>
				If the object is a Tower returns a handle to the Tower, otherwise returns empty reference.
				Use IsValid to make a difference between these cases.
			</description>
		</func>
		<func name="AsWagon" returns="Wagon">
			<description>
				If the object is an Wagon returns a handle to the Wagon, otherwise returns empty reference.
				Use IsValid to make a difference between these cases.
			</description>
		</func>
		<func name="AsSettlement" returns="Settlement">
			<description>
				If the object is a Settlement returns a handle to the Settlement, otherwise returns empty reference.
				Use IsValid to make a difference between these cases.
			</description>
		</func>
		<func name="KillCommand" returns="void">
			<description>
				Stops the execution of the current command and clears it from the queue.
			</description>
		</func>
		<func name="ClearCommands" returns="void">
			<description>
				Clears all commands in the queue, except for the currently executed.
			</description>
		</func>
		<func name="AddCommand" returns="void">
			<param name="beginning" type="bool" />
			<param name="commandName" type="str" />
			<description>
				Adds a command, that does not require parameters, to the queue of the object.
				If beginning is TRUE the command is added to the head of the queue; otherwise the command is added to its tail.
			</description>
		</func>
		<func name="AddCommand" returns="void">
			<param name="beginning" type="bool" />
			<param name="commandName" type="str" />
			<param name="pointParameter" type="TPoint" />
			<description>
				Adds a command, that requires a point as parameter, to the queue of the object.
				If beginning is TRUE the command is added to the head of the queue; otherwise the command is added to its tail.
			</description>
		</func>
		<func name="AddCommand" returns="void">
			<param name="beginning" type="bool" />
			<param name="commandName" type="str" />
			<param name="objectParameter" type="Obj" />
			<description>
				Adds a command, that requires an object as parameter, to the queue of the object.
				If beginning is TRUE the command is added to the head of the queue; otherwise the command is added to its tail.
			</description>
		</func>
		<func name="DistTo" returns="int">
			<param name="farPoint" type="TPoint" />
			<description>
				Returns the distance to a point.
			</description>
		</func>
		<func name="DistTo" returns="int">
			<param name="farObject" type="Obj" />
			<description>
				Returns the distance to an object.
			</description>
		</func>
		<func name="IsEnemy" returns="bool">
			<param name="unknownObj" type="Obj" />
			<description>
				Returns TRUE if an object is an enemy of the current Object, otherwise returns FALSE.
			</description>
		</func>
		<func name="IsAlive" returns="bool">
			<description>
				Returns TRUE if the object is alive, otherwise returns FALSE.
			</description>
		</func>
		<func name="GetEnemies" returns="ObjList">
			<description>
				Returns the object list of all the enemies seen by the object.
			</description>
		</func>
		<func name="Kill" returns="void">
			<description>
				Destroys the object.
			</description>
		</func>
		<func name="pr" returns="void">
			<param name="number" type="str" />
			<description>
				Used by the debug mode to print strings. Debug mode prints to the console the current action/state of the object.
			</description>
		</func>
		<func name="pr" returns="void">
			<param name="number" type="int" />
			<description>
				Used by the debug mode to print numbers. Debug mode prints to the console the current action/state of the object.
			</description>
		</func>
		<func name="GetDebug" returns="bool">
			<description>
				Returns TRUE if the object is in debug mode, otherwise returns FALSE.
			</description>
		</func>
		<func name="SetDebug" returns="void">
			<param name="number" type="bool" />
			<description>
				Sets the object in debug mode. Debug mode prints to the console the current action/state of the object.
			</description>
		</func>
	</type>
	<!-- Building -->
	<type name="Building" parent="Obj">
		<description>
			This is a generic type for all structures/buildings on the map.
		</description>
		<!-- Building functions -->
		<func name="BestTarget" returns="Obj">
			<description>
				Returns the nearest enemy Obj that can be attacked.
			</description>
		</func>
		<func name="Attack" returns="bool" latent="1">
			<param name="enemyObject" type="Obj" />
			<description>
				Returns TRUE if the enemyObject can be attacked, otherwise returns FALSE.
			</description>
		</func>
	</type>
	<!-- Wagon -->
	<type name="Wagon __ UNDER CONSTRUCTION __" parent="Unit">
		<description>
			This is a generic type for all wagons on the map.
		</description>
		<!-- Wagon functions -->
		<func name="SetSource" returns="void">
			<description>
			</description>
		</func>
		<func name="SetDestination" returns="void">
			<description>
			</description>
		</func>
		<func name="GetMaxLoad" returns="int">
			<description>
			</description>
		</func>
		<func name="GetGoldLoad" returns="int">
			<description>
			</description>
		</func>
		<func name="GetFoodLoad" returns="int">
			<description>
			</description>
		</func>
	</type>
	<!-- Unit -->
	<type name="Unit" parent="Obj">
		<description>
			This is a generic type for all units on the map.
		</description>
		<!-- Unit properties -->
		<prop name="speed" type="int" ptr="1">
			<description>
				Holds the speed value of the unit.
			</description>
		</prop>
		<prop name="speed_factor" type="int" ptr="1">
			<description>
				Holds the speed_factor of the unit. If speed_factor is equal to 200, it doubles the speed of the unit.
			</description>
		</prop>
		<prop name="stamina" type="int" ptr="1">
			<description>
				Holds the stamina value of the unit.
			</description>
		</prop>
		<prop name="user" type="int" ptr="1">
			<description>
				Holds the user value of the unit.
			</description>
		</prop>
		<prop name="dest" type="TPoint">
			<description>
				Holds the destination point of the unit.
			</description>
		</prop>
		<!-- Unit functions -->
		<func name="Goto" returns="bool" latent="1">
			<param name="number" type="Obj" />
			<param name="number" type="int" />
			<param name="number" type="int" />
			<description>
			</description>
		</func>
		<func name="Goto" returns="bool" latent="1">
			<param name="number" type="TPoint" />
			<param name="number" type="int" />
			<description>
			</description>
		</func>
		<func name="HasPath" returns="bool">
			<description>
				Returns TRUE if the unit has a destination and is moving to it, FALSE if the unit has reached the destination.
			</description>
		</func>
		<func name="CancelPath" returns="void">
			<description>
				Cancels the current movement of the unit.
			</description>
		</func>
		<func name="BestTarget" returns="Obj">
			<description>
				Returns the nearest enemy Obj that can be attacked.
			</description>
		</func>
		<func name="InRange" returns="bool">
			<param name="object" type="Obj" />
			<description>
				Returns TRUE if an object is in the range of the unit, otherwise returns FALSE.
			</description>
		</func>
		<func name="Attack" returns="bool" latent="1">
			<param name="enemy" type="Obj" />
			<description>
				Returns TRUE if the unit attacks an object, otherwise returns FALSE. Attack internally uses InRange.
			</description>
		</func>
		<func name="AttachTo" returns="bool">
			<param name="hero" type="Hero" />
			<description>
				Returns TRUE if the unit id attached to the hero, otherwise returns FALSE.
			</description>
		</func>
		<func name="DetachFrom" returns="void">
			<param name="hero" type="Hero" />
			<description>
				Detaches the unit from the hero.
			</description>
		</func>
		<func name="Idle" returns="void">
			<param name="time" type="int" />
			<param name="number" type="int" />
			<description>
				Plays the idle animation within the given 'time' in milliseconds if the engine allows it. The unit has an Idle status.
			</description>
		</func>
		<func name="Taunt" returns="void">
			<param name="time" type="int" />
			<param name="number" type="int" />
			<description>
				Plays the taunt animation within the given 'time' in milliseconds if the engine allows it. The unit has a Taunt status.
			</description>
		</func>
	</type>
	<!-- Hero -->
	<type name="Hero" parent="Unit">
		<description>
			This is a generic type for all heroes on the map.
		</description>
		<!-- Hero functions -->
		<func name="army" returns="ObjList">
			<description>
				Returns an ObjList containing the units attached to the Hero.
			</description>
		</func>
	</type>
	<!-- Settlement -->
	<type name="Settlement" parent="Building">
		<description>
			This is a generic type for all settlements on the map.
		</description>
		<!-- Settlement functions -->
		<func name="AttachBuilding" returns="void">
			<param name="building" type="Building" />
			<description>
				Attaches a building to the settlement.
			</description>
		</func>
	</type>
	<!-- ObjList -->
	<type name="ObjList">
		<description>
			This is a generic type for all units/buildings on the map.
		</description>
		<!-- ObjList functions -->
		<func name="Count" returns="int">
			<description>
				Returns the number of objects in the list.
			</description>
		</func>
		<func name="[]" returns="Obj">
			<param name="number" type="int" />
			<description>
				Makes possible addressing the objects by a number like in an array.
			</description>
		</func>
		<func name="First" returns="Obj">
			<description>
				Returns the first object in the list. It's exactly as [0].
			</description>
		</func>
		<func name="FirstUnit" returns="Unit">
			<description>
				Returns the first unit in the list.
			</description>
		</func>
		<func name="Contains" returns="bool">
			<param name="object" type="Obj" />
			<description>
				Returns TRUE if the ObjList contains the object, otherwise returns FALSE.
			</description>
		</func>
		<func name="Add" returns="void">
			<param name="object" type="Obj" />
			<description>
				Adds the object at the end of the ObjList.
			</description>
		</func>
		<func name="Remove" returns="void">
			<param name="object" type="Obj" />
			<description>
				Removes the object from the ObjList.
			</description>
		</func>
		<func name="ClearDead" returns="void">
			<description>
				Removes all objects with health = 0 and all deleted ones from the list.
			</description>
		</func>
	</type>
	<!-- - - - - - GROUPS - - - - - -->
	<!-- Point functions -->
	<group name="Point">
		<description>
			Functions for performing basic operations with points.
		</description>
		<func name="ptGetX" returns="int">
			<param name="point" type="TPoint" />
			<description>
				Returns the x property of a point.
			</description>
		</func>
		<func name="ptGetY" returns="int">
			<param name="point" type="TPoint" />
			<description>
				Returns the y property of a point.
			</description>
		</func>
		<func name="ptSet" returns="void">
			<param name="point" type="TPoint" ptr="1" />
			<param name="x" type="int" />
			<param name="y" type="int" />
			<description>
				Sets the x-y properties of a point.
			</description>
		</func>
		<func name="ptInRect" returns="bool">
			<param name="point" type="TPoint" />
			<param name="rectangle" type="TRect" />
			<description>
				Returns TRUE if a point is in the area that the rectangle encloses, otherwise returns FALSE.
			</description>
		</func>
		<func name="Dist" returns="int">
			<param name="pointA" type="TPoint" />
			<param name="pointB" type="TPoint" />
			<description>
				Returns the distance between pointA and pointB.
			</description>
		</func>
	</group>
	<!-- Rect functions -->
	<group name="Rect">
		<description>
			Functions for performing basic operations with rectangles.
		</description>
		<func name="rcIntersect" returns="TRect">
			<param name="rectangleA" type="TRect" />
			<param name="rectangleB" type="TRect" />
			<description>
				Intersects rectangleA with rectangleB and returns a new rectangle in result.
			</description>
		</func>
		<func name="rcAdd" returns="TRect">
			<param name="rectangleA" type="TRect" />
			<param name="rectangleB" type="TRect" />
			<description>
				Adds rectangleA to rectangleB and returns a new rectangle in result.
			</description>
		</func>
		<func name="rcGetCenter" returns="TPoint">
			<param name="rectangle" type="TRect" />
			<description>
				Returns a point with x and y properties that are the coordinates of the geometrical center of the rectangle.
			</description>
		</func>
	</group>
	<!-- Math functions -->
	<group name="Math">
		<description>
			Mathematical functions for performing basic numeric operations.
		</description>
		<func name="abs" returns="int">
			<param name="number" type="int" />
			<description>
				Returns the absolute value of a number.
			</description>
		</func>
		<func name="rand" returns="int">
			<param name="value" type="int" />
			<description>
				Returns a random integer in the range from 0 to value - 1.
			</description>
		</func>
		<func name="sqrt" returns="float">
			<param name="number" type="float" />
			<description>
				Returns the square root of the number.
			</description>
		</func>
	</group>
	<!-- String functions -->
	<group name="String">
		<description>
			Functions that perform basic operations with strings.
		</description>
		<func name="StrCmp" returns="int">
			<param name="stringA" type="str" />
			<param name="stringB" type="str" />
			<description>
				Returns TRUE if stringA is identical to stringB, otherwise returns FALSE.
			</description>
		</func>
		<func name="StrCat" returns="void">
			<param name="stringA" type="str" ptr="1" />
			<param name="stringB" type="str" />
			<description>
				Appends stringB to stringA (stringA is changed).
			</description>
		</func>
		<func name="+" returns="str">
			<param name="stringA" type="str" />
			<param name="stringB" type="str" />
			<description>
				Appends stringB to stringA and returns the result (stringA is not changed).
			</description>
		</func>
		<func name="FindChrPos" returns="int">
			<param name="string" type="str" />
			<param name="char" type="int" />
			<description>
				Returns the position of the char in the string.
			</description>
		</func>
		<func name="GetChr" returns="int">
			<param name="string" type="str" />
			<param name="position" type="int" />
			<description>
				Returns the char at a given position in the string.
			</description>
		</func>
		<func name="IsNull" returns="bool">
			<param name="string" type="str" />
			<description>
				Returns TRUE if the string is null/empty, otherwise returns FALSE.
			</description>
		</func>
		<func name="StrLen" returns="int">
			<param name="string" type="str" />
			<description>
				Returns the length of the string.
			</description>
		</func>
	</group>
	<!-- Script Behaviour functions -->
	<group name="Script Behaviour">
		<description>
			Functions that rule the script behaviour.
		</description>
		<func name="Sleep" returns="void">
			<param name="time" type="int" />
			<description>
				Stops the execution of the script for the given time in milliseconds.
				The script awaits the specified time to run out.
			</description>
		</func>
		<func name="KillScript" returns="void">
			<description>
				Breaks the execution of the current script.
			</description>
		</func>
		<func name="Run" returns="bool">
			<param name="scriptFileName" type="str" />
			<description>
				Executes the script in the file with the given scriptFileName.
			</description>
		</func>
	</group>
	<!-- Environment functions -->
	<group name="Environment">
		<description>
			Provides support for a global environment composed of variables of type string or int.
		</description>
		<func name="EnvWriteString" returns="void">
			<param name="nameStr" type="str" />
			<param name="string" type="str" />
			<description>
				Assigns the string to a global variable (if it does not exists, it is created).
			</description>
		</func>
		<func name="EnvWriteInt" returns="void">
			<param name="nameInt" type="str" />
			<param name="value" type="int" />
			<description>
				Assigns the value to a global variable (if it does not exists, it is created).
			</description>
		</func>
		<func name="EnvReadString" returns="str">
			<param name="nameStr" type="str" />
			<description>
				Returns the value of a global variable.
			</description>
		</func>
		<func name="EnvReadInt" returns="int">
			<param name="nameInt" type="str" />
			<description>
				Returns the value of a global variable.
			</description>
		</func>
		<func name="EnvList" returns="void">
			<param name="number" type="int" />
			<description>
				Returns a window with the current values of the global variables.
			</description>
		</func>
		<func name="EnvExport" returns="void">
			<param name="number" type="str" />
			<description>
				Creates a script exported to a file, a sequence of commands EnvWriteString and EnvWriteInt, that will create the current environment.
			</description>
		</func>
	</group>
	<!-- Console functions -->
	<group name="Console">
		<description>
			Functions to manage the console.
			The console is a text field with several lines placed over the game, specific to the game engine and the editor, that allows to issue different commands by pressing Enter and typing them.
			The results are displayed on the screen as text/error messages.
		</description>
		<func name="pr" returns="void">
			<param name="string" type="str" />
			<description>
				Outputs a string to the console.
			</description>
		</func>
		<func name="pr" returns="void">
			<param name="number" type="int" />
			<description>
				Outputs a number to the console.
			</description>
		</func>
		<func name="cls" returns="void">
			<description>
				Clears the console.
			</description>
		</func>
		<func name="quit" returns="void">
			<description>
				Terminates the console.
			</description>
		</func>
		<func name="Black" returns="void">
			<description>
				Clears the screen to black.
			</description>
		</func>
	</group>
	<!-- Editor functions -->
	<group name="Editor">
		<description>
			Functions for editing the map and objects on it.
		</description>
		<func name="Choose" returns="str">
			<param name="namelist" type="str" />
			<param name="list" type="str" />
			<param name="number" type="int" />
			<description>
				Starts a dialog that lets the user to choose from a list.
			</description>
		</func>
		<func name="ListClasses" returns="str">
			<description>
				Returns a list of the XML classes used in the game.
				The list is used by the dialog started with the function Choose.
			</description>
		</func>
		<func name="ListFolder" returns="str">
			<param name="folderName" type="str" />
			<description>
				Returns a list of filenames from a folder.
				The list is used by the dialog started with the function Choose.
			</description>
		</func>
		<func name="ListTerrains" returns="str">
			<description>
				Returns a list of the terrains used in the game.
				The list is used by the dialog started with the function Choose.
			</description>
		</func>
		<func name="MiniMap" returns="void">
			<description>
				Starts a mini map.
			</description>
		</func>
		<func name="SetMiniMapRect" returns="void">
			<param name="rectangle" type="TRect" />
			<description>
				Sets the mini map margins accordingly to a rectangle.
			</description>
		</func>
		<func name="FlatTerrain" returns="void">
			<description>
				Makes the whole terrain flat by setting its height to 0.
			</description>
		</func>
		<func name="GetMapSize" returns="TPoint">
			<description>
				Returns a point that contains in its x-y properties the horizontal-vertical sizes of the current map.
			</description>
		</func>
		<func name="ExportMapObj" returns="void">
			<param name="fileName" type="str" />
			<description>
				Saves the map objects on the map to a filename.
			</description>
		</func>
		<func name="ImportMapObj" returns="void">
			<param name="fileName" type="str" />
			<description>
				Loads the map objects on the map from a filename.
			</description>
		</func>
		<func name="RandomTerrain" returns="void">
			<param name="fileName" type="str" />
			<description>
				Generates a random terrain of the map from the options set in a file.
			</description>
		</func>
		<func name="SaveTerrain" returns="void">
			<param name="fileName" type="str" />
			<description>
				Saves terrain to a file.
			</description>
		</func>
		<func name="LoadTerrain" returns="void">
			<param name="fileName" type="str" />
			<description>
				Loads terrain from a file.
			</description>
		</func>
		<func name="GetSelection" returns="ObjList">
			<description>
				Returns an ObjList containing the currently selected objects.
			</description>
		</func>
		<func name="PlaceEx" returns="Obj">
			<param name="class" type="str" />
			<param name="x" type="int" />
			<param name="y" type="int" />
			<param name="player" type="int" />
			<description>
				Places an object of the defined class belonging to a certain player on the position x-y.
			</description>
		</func>
	</group>
	<!-- Command functions -->
	<group name="Command">
		<description>
			Functions for editing and issuing commands for the units on the map.
		</description>
		<func name="ClearCommandsMultiple" returns="void">
			<param name="objList" type="ObjList" />
			<description>
				Clears all commands in the queue of all objects in an objList.
			</description>
		</func>
		<func name="AddCommandMultiple" returns="void">
			<param name="objList" type="ObjList" />
			<param name="beginning" type="bool" />
			<param name="commandName" type="str" />
			<description>
				Adds a command, that does not require parameters, to the queue of every object in an objList.
				If beginning is TRUE, the command is added to the head of the queue, otherwise to its tail.
			</description>
		</func>
		<func name="AddCommandMultiple" returns="void">
			<param name="objList" type="ObjList" />
			<param name="beginning" type="bool" />
			<param name="commandName" type="str" />
			<param name="pointParameter" type="TPoint" />
			<description>
				Adds a command, that requires a point as parameter, to the queue of every object in an objList.
				If beginning is TRUE, the command is added to thehead of the queue, otherwise to its tail.
			</description>
		</func>
		<func name="AddCommandMultiple" returns="void">
			<param name="objList" type="ObjList" />
			<param name="beginning" type="bool" />
			<param name="commandName" type="str" />
			<param name="objectParameter" type="Obj" />
			<description>
				Adds a command, that requires an object as parameter, to the queue of every object in the list objList.
				If beginning is TRUE, the command is added to the head of the queue, otherwise to its tail.
			</description>
		</func>
		<func name="ScriptEditor" returns="void">
			<description>
				Starts the ScriptEditor dialog, where you can edit scripts.
			</description>
		</func>
	</group>
	<!-- Music and Sound functions -->
	<group name="Music and Sound">
		<description>
			Functions for managing the music and the sounds in the game.
		</description>
		<func name="PlayMusic" returns="void">
			<param name="mp3FileName" type="str" />
			<description>
				Plays a music from a '.mp3' file.
			</description>
		</func>
		<func name="PlaySound" returns="void">
			<param name="wavFileName" type="str" />
			<description>
				Plays a sound from a '.wav' file.
			</description>
		</func>
		<func name="MusicPlaying" returns="bool">
			<description>
				Returns TRUE if a music is being played currently, otherwise returns FALSE.
			</description>
		</func>
	</group>
	<!-- View control functions -->
	<group name="View control">
		<description>
			Functions that give control of the View.
		</description>
		<func name="ViewPos" returns="TPoint">
			<description>
				Returns a map point that is the center of the current View.
			</description>
		</func>
		<func name="View" returns="void">
			<param name="point" type="TPoint" />
			<param name="number" type="bool" />
			<description>
				Centers the View on a map point.
			</description>
		</func>
	</group>
	<!-- Game control functions -->
	<group name="Game control">
		<description>
			Functions that give control of the Game.
		</description>
		<func name="GetSpeed" returns="int">
			<description>
				Returns the current game speed.
			</description>
		</func>
		<func name="SetSpeed" returns="void">
			<param name="newSpeed" type="int" />
			<description>
				Sets the game speed.
			</description>
		</func>
		<func name="SetPlayer" returns="void">
			<param name="newPlayer" type="int" />
			<description>
				The current player takes possession of all objects of a certain player.
			</description>
		</func>
		<func name="ToggleFog" returns="void">
			<description>
				Toggles the map fog.
			</description>
		</func>
	</group>
	<!-- Other functions -->
	<group name="Other functions">
		<description>
			Functions that don't belong to any other group.
		</description>
		<func name="DumpStack" returns="void">
			<description>
			</description>
		</func>
		<func name="DumpCode" returns="void">
			<param name="number" type="int" />
			<description>
			</description>
		</func>
		<func name="Invalidate" returns="void">
			<description>
			</description>
		</func>
		<func name="InvalidateAllToggle" returns="void">
			<description>
			</description>
		</func>
		<func name="ToggleInvRects" returns="void">
			<description>
			</description>
		</func>
		<func name="ToggleFPS" returns="void">
			<description>
				Turns on a mode that shows the status of the FPS and the memory size that the game/editor is currently using.
			</description>
		</func>
		<func name="SetCursor" returns="void">
			<param name="filename" type="str" />
			<description>
				Sets the cursor from a file.
			</description>
		</func>
		<func name="MakePassable" returns="void">
			<description>
				Makes the whole map passable for all units.
			</description>
		</func>
		<func name="RebuildPass" returns="void">
			<description>
				Rebuilds the passability for all units accordingly to the terrain.
			</description>
		</func>
		<func name="AddFD" returns="void">
			<description>
				Adds squares on the map so the curves of the terrain can be seen very precisely.
			</description>
		</func>
		<func name="RemFD" returns="void">
			<description>
				Removes the squares on the map placed with the function AddFD.
			</description>
		</func>
		<func name="Splash" returns="void">
			<param name="number" type="str" />
			<param name="number" type="str" />
			<description>
			</description>
		</func>
		<func name="InsDecor" returns="void">
			<param name="number" type="int" />
			<param name="number" type="int" />
			<param name="number" type="int" />
			<description>
				Inserts decor.
			</description>
		</func>
		<func name="DelDecor" returns="void">
			<param name="number" type="int" />
			<param name="number" type="int" />
			<description>
				Deletes decor.
			</description>
		</func>
		<func name="PreLit" returns="void">
			<description>
			</description>
		</func>
		<func name="RayOfLight" returns="void">
			<param name="number" type="int" />
			<param name="number" type="int" />
			<param name="number" type="int" />
			<param name="number" type="int" />
			<description>
			</description>
		</func>
		<func name="DumpFuncToXML" returns="void">
			<description>
				Lists all script functions in a XML file.
			</description>
		</func>
		<func name="SHU" returns="void">
			<description>
			</description>
		</func>
		<func name="Globals" returns="glob">
			<description>
			</description>
		</func>
		<func name="glob::Now" returns="int">
			<param name="number" type="glob" />
			<description>
			</description>
		</func>
		<func name="NearestUnit" returns="Unit">
			<param name="objList" type="ObjList" />
			<param name="point" type="TPoint" />
			<description>
				Returns the nearest unit from an object list to a point.
			</description>
		</func>
		<func name="ListFolderEx" returns="str">
			<param name="number" type="str" />
			<param name="number" type="str" />
			<description>
			</description>
		</func>
		<func name="DeepWater" returns="void">
			<param name="number" type="int" />
			<param name="number" type="int" />
			<param name="number" type="int" />
			<description>
			</description>
		</func>
	</group>
	<!-- Functions with BUGS -->
	<group name="Functions with BUGS">
		<description>
			Functions that are like a zoo for bugs.
		</description>
		<func name="pause" returns="void">
			<description>
				Does nothing but raises dust.
			</description>
		</func>
		<func name="Clear" returns="void">
			<description>
				Clears the debug flags from all game objects.
			</description>
		</func>
		<func name="ExploreAll" returns="void">
			<description>
				Shows the whole map as if it is already explored.
			</description>
		</func>
		<func name="ToggleZoomMap" returns="void">
			<description>
				Zooms the main map.
			</description>
		</func>
	</group>
	<!-- Functions to delete -->
	<group name="Functions to delete">
		<description>
			Functions that should be deleted.
		</description>
		<func name="PlaySound1" returns="void">
			<description>
				Does something suspicious. The func is created from somebody once upon a time to no purpose.
			</description>
		</func>
		<func name="PlaySound2" returns="void">
			<description>
				Does something suspicious. The func is created from somebody once upon a time to no purpose.
			</description>
		</func>
		<func name="PlaySound3" returns="void">
			<description>
				Does something suspicious. The func is created from somebody once upon a time to no purpose.
			</description>
		</func>
		<func name="PlaySound4" returns="void">
			<description>
				Does something suspicious. The func is created from somebody once upon a time to no purpose.
			</description>
		</func>
	</group>
</doc>