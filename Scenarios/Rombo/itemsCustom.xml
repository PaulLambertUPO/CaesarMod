	<items>
		<item
			id="???"
			name="???"
			image="gameres/icons/items/glowing diamond.bmp"
			sound=""
			level="0"
			description="???"
			usecount="0"
			customdata="0"
			use_script=""
			location_script=""
			object_script=""
			kill_script=""
			die_script=""
			attachedkill_script=""
			attacheddie_script=""
			equip_script=""
			remove_script=""
			important="yes"
			cursed="0">
			<bonus
				health="100"
				damage="100"
				armor_slash="100"
				armor_pierce="100"
				health_percent="100"
				damage_percent="100"
				armor_slash_percent="100"
				armor_pierce_percent="100"
				level="10"
				experience="1000"/>
		</item>
		<item
			id="Fur gloves of health"
			name="Fur gloves of health"
			image="gameres/icons/items/fur gloves of madness.bmp"
			sound="data/sound entities/itemuse.xml"
			level="0"
			description="They add 1200 health.\nIf used, they restore the health of a nearby ally by taking it from the owner"
			usecount="0"
			customdata="0"
			use_script="//void, Obj owner\n\nUnit this;\nint health_to_give;\n\nthis = owner.AsUnit();\n\nhealth_to_give = .health - .maxhealth / 10;//owner needs at least 1 health more than 10% maximum health in order to use the item\n\nif (health_to_give \g 0) {\n ObjList ol;\n\n if (.InHolder) {\n  ol = .GetUnitsInSameHolder();\n  ol.Remove(this);\n }\n else\n  ol = ObjsInSight(this, \'Unit\').GetObjList();\n\n if (ol.count \g 0) {\n  Unit u;\n  int i;\n\n  //make 5 attempts to heal an ally chosen randomly, then in order\n  for (i = 0; i \l 5; i += 1) {\n   u = ol[rand(ol.count)];\n   if (u.IsValid)\n    if (!u.IsDead())\n     if (!.IsEnemy(u))\n      if (u.health \l u.maxhealth) {\n       int health_to_take, heal_damage;\n       health_to_take = u.maxhealth - u.health;\n       heal_damage = MIN(health_to_take, health_to_give);\n       u.Heal(heal_damage);\n       if (!u.InHolder)\n        CreateFeedback(\'Heal\', u);\n       .Damage(heal_damage);\n       if (!.InHolder)\n        CreateFeedback(\'Damage1\', this);\n       return;\n      }\n  }\n  for (i = 0; i \l ol.count; i += 1) {\n   u = ol[i];\n   if (u.IsValid)\n    if (!u.IsDead())\n     if (!.IsEnemy(u))\n      if (u.health \l u.maxhealth) {\n       int health_to_take, heal_damage;\n       health_to_take = u.maxhealth - u.health;\n       heal_damage = MIN(health_to_take, health_to_give);\n       u.Heal(heal_damage);\n       if (!u.InHolder)\n        CreateFeedback(\'Heal\', u);\n       .Damage(heal_damage);\n       if (!.InHolder)\n        CreateFeedback(\'Damage1\', this);\n      }\n  }\n }\n}"
			location_script=""
			object_script=""
			kill_script=""
			die_script=""
			attachedkill_script=""
			attacheddie_script=""
			equip_script=""
			remove_script=""
			important="no"
			cursed="0">
			<bonus
				health="1200"
				damage="0"
				armor_slash="0"
				armor_pierce="0"
				health_percent="0"
				damage_percent="0"
				armor_slash_percent="0"
				armor_pierce_percent="0"
				level="0"
				experience="0"/>
		</item>
		<item
			id="Concentration stone"
			name="Concentration stone"
			image="gameres/icons/items/concentration stone.bmp"
			sound="data/sound entities/itemuse.xml"
			level="0"
			description="Adds 60 damage.\nIf used, it restores the health of the owner by taking it from an ally of choice"
			usecount="0"
			customdata="0"
			use_script=""
			location_script=""
			object_script="//void, Obj owner, Obj target\n\nif (!owner.AsUnit().InHolder)\n if (target.AsUnit().IsValid)\n  if (!target.IsEnemy(owner)) {\n   if (target.DistTo(owner) \l= owner.sight * 3 / 2) {\n    int missing_health;\n\n    missing_health = owner.maxhealth - owner.health;\n\n    if (missing_health \g 0) {\n     int health_taken;\n\n     if (target.AsHero().IsValid)\n      health_taken = target.health - target.maxhealth / 5;//allied heroes cannot go below 20%\n     else\n      health_taken = target.health;\n\n     if (health_taken \g 0) {\n      int heal_damage;\n      heal_damage = MIN(health_taken, missing_health);\n      CreateFeedback(\'Heal\', owner.AsUnit());\n      owner.Heal(heal_damage);\n      CreateFeedback(\'Damage1\', target.AsUnit());\n      target.Damage(heal_damage);\n     }\n    }\n   }\n  }\n  else\n   UserNotification(\'friendly target only\', \'\', owner.posRH, owner.player);\n else\n  UserNotification(\'unit target only\', \'\', owner.posRH, owner.player);\nelse\n UserNotification(\'item cannot use in holder\', \'\', owner.posRH, owner.player);"
			kill_script=""
			die_script=""
			attachedkill_script=""
			attacheddie_script=""
			equip_script=""
			remove_script=""
			important="no"
			cursed="0">
			<bonus
				health="0"
				damage="60"
				armor_slash="0"
				armor_pierce="0"
				health_percent="0"
				damage_percent="0"
				armor_slash_percent="0"
				armor_pierce_percent="0"
				level="0"
				experience="0"/>
		</item>
		<item
			id="Ring of Power"
			name="Ring of power"
			image="gameres/icons/items/ring of power.bmp"
			sound=""
			level="0"
			description="Adds 20 damage.\nIt stores up to 600 charges to restore the health of the owner by 20 every second"
			usecount="0"
			customdata="0"
			use_script=""
			location_script=""
			object_script=""
			kill_script=""
			die_script=""
			attachedkill_script=""
			attacheddie_script=""
			equip_script="//void, Obj owner\n\nUnit this;\n\nthis = owner.AsUnit();\n\nif (.IsValid) {\n int charges;\n while (1) {\n  Sleep(1000);\n  charges = GetUseCount();\n  if (.health \l .maxhealth \a\a charges \g= 25) {\n   charges -= 20;\n   .Heal(20);\n   if (!.InHolder)\n    CreateFeedback(\'Heal\', this);\n  }\n  else\n   charges = MIN(600, charges + 5);\n  ItemUsed(GetUseCount() - charges);\n }\n}"
			remove_script=""
			important="no"
			cursed="0">
			<bonus
				health="0"
				damage="20"
				armor_slash="0"
				armor_pierce="0"
				health_percent="0"
				damage_percent="0"
				armor_slash_percent="0"
				armor_pierce_percent="0"
				level="0"
				experience="0"/>
		</item>
	</items>
